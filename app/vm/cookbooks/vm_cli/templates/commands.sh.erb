# VM Navigation
function www() {
  MAGENTO_DIRECTORY="<%= @web_root %>"
  cd ${MAGENTO_DIRECTORY}
}
export -f www

function list-cli() {
  www
  ./bin/magento list
}
export -f list-cli

function logs() {
  www
  cd var/log
}
export -f logs

# CLI
function own() {
  USER="<%= @user %>"
  GROUP="<%= @user %>"
  printf "\nUpdating permissions..."
  clear
  www
  sudo chown -R ${USER}:${GROUP} var/ pub/ generated/ app/etc
  sudo chmod -R 777 var/ pub/ app/etc/ generated/
  sleep 1
  printf "done.\n"
}
export -f own

function clear-web-root() {
  printf "\nClearing the web root..."
  www
  sudo rm -rf ./generated/
  sudo rm -rf {..?,.[!.],}*
  printf "done. \n"
}
export -f clear-web-root

function cache() {
  clear
  www
  printf "Clearing cache...\n"
  ./bin/magento cache:clean
  rm -rf var/cache/* var/page_cache/*
}
export -f cache

function flush-cache() {
  www
  printf "\nFlushing cache...\n"
  ./bin/magento cache:flush
  rm -rf var/cache/* var/page_cache/*
}
export -f flush-cache

function enable-cache() {
  printf "\nEnabling cache...\n"
  www
  ./bin/magento cache:enable
}
export -f enable-cache

function disable-cache() {
  printf "\nDisabling cache...\n"
  www
  ./bin/magento cache:disable
}
export -f disable-cache

function disable-cms-cache() {
  printf "\nDisabling Layout, Block, and Full Page cache...\n"
  www
  ./bin/magento cache:disable layout block_html full_page
}
export -f disable-cms-cache

function reindex() {
  clear
  www
  printf "Invalidating indexes...\n"
  ./bin/magento indexer:reset
  printf "\nReindexing...\n"
  ./bin/magento indexer:reindex
}
export -f reindex

function clean() {
  reindex
  cache
}
export -f clean

function enable-cron() {
  printf "\nEnabling cron...\n"
  www
  ./bin/magento cron:install
  printf "done.\n"
}
export -f enable-cron

function cron() {
  printf "\nRunning cron jobs...\n"
  www
  ./bin/magento cron:run
}
export -f cron

function disable-cron() {
  printf "\nDisabling cron...\n"
  www
  ./bin/magento cron:remove
  crontab -r
  clear-cron-schedule 
}
export -f disable-cron

function list-modules() {
  www
  ./bin/magento module:status
}
export -f list-modules

function enable-all-modules() {
  printf "\nEnabling all modules...\n"
  www
  ./bin/magento module:enable --all
}
export -f enable-all-modules

function process-catalogs() {
  printf "\nProcessing shared catalog(s)...\n"
  www
  reindex
  cache
  cron
}
export -f process-catalogs

function db-upgrade() {
  printf "\nUpgrading database schema...\n"
  www
  ./bin/magento setup:upgrade
}
export -f db-upgrade

function di-compile() {
  printf "\nCompiling dependency injections...\n"
  www && ./bin/magento setup:di:compile
}
export -f di-compile

function deploy-content() {
  printf "\nDeploying static content...\n"
  www
  rm -rf ./pub/static/*
  ./bin/magento setup:static-content:deploy -f
}
export -f deploy-content

function dev-mode() {
  printf "\nSwitching to Developer mode...\n"
  www
  ./bin/magento deploy:mode:set developer
  cache
}
export -f dev-mode

function prod-mode() {
  printf "\nSwitching to Production mode...\n"
  www
  ./bin/magento deploy:mode:set production
}
export -f prod-mode

function enable-media-gallery() {
  printf "\nEnabling media gallery...\n"
  www
  ./bin/magento config:set system/media_gallery/enabled 1

  printf "\nSynchronizing media assets...\n"
  ./bin/magento media-gallery:sync
}
export -f enable-media-gallery

function start-consumers() {
  CONSUMERS_LIST=(
    <% @consumer_list.each do |consumer| %>
      <%= consumer %>
    <% end %>
  )
  for consumer in "${CONSUMERS_LIST[@]}"
  do
    printf "\nStarting consumer: $consumer"
    bin/magento queue:consumers:start $consumer &
  done
} 
export -f start-consumers

# PHP-FPM
function start-php() {
  printf "\nRestarting PHP-FPM <%= @php_version %>...\n"
  sudo systemctl restart php<%= @php_version%>-fpm
}
export -f start-php

function stop-php() {
  printf "\nStopping PHP-FPM <%= @php_version %>...\n"
  sudo systemctl stop php<%= @php_version %>-fpm
}
export -f stop-php

function status-php() {
  sudo systemctl status php<%= @php_version %>-fpm
}
export -f status-php

# Web
function start-web() {
  printf "\nRestarting the web server...\n"
  sudo systemctl restart nginx
}
export -f start-web

function stop-web() {
  printf "\nStopping the web server...\n"
  sudo systemctl stop nginx
}
export -f stop-web

function status-web() {
  sudo systemctl status nginx
}
export -f status-web

# Database
function db() {
  DB_HOST="<%= @db_host %>"
  DB_USER="<%= @db_user %>"
  DB_PASSWORD="<%= @db_password %>"
  DB_NAME="<%= @db_name %>"
  sudo mysql ${DB_NAME} -sN -h ${DB_HOST} -u ${DB_USER} -p${DB_PASSWORD}
}
export -f db

function start-db() {
  printf "\nRestarting the database...\n"
  sudo systemctl restart mysql
}
export -f start-db

function stop-db() {
  printf "\nStopping the database...\n"
  sudo systemctl stop mysql
}
export -f stop-db

function status-db() {
  sudo systemctl status mysql
}
export -f status-db

<% if %w[vmware docker].include?(@provider) %>
# Elasticsearch
function enable-elasticsearch() {
  printf "\nEnabling Elasticsearch...\n"
  sudo /bin/systemctl enable elasticsearch.service
}
export -f enable-elasticsearch

function start-elasticsearch() {
  printf "\nRestarting Elasticsearch...\n"
  sudo service elasticsearch restart
}
export -f start-elasticsearch

function stop-elasticsearch() {
  printf "\nStopping Elasticsearch...\n"
  sudo service elasticsearch stop
}
export -f stop-elasticsearch

function status-elasticsearch() {
  sudo service elasticsearch status
}
export -f status-elasticsearch

function log-elasticsearch() {
  sudo journalctl --unit elasticsearch
}
export -f log-elasticsearch

function disable-elasticsearch() {
  printf "\nDisabling Elasticsearch...\n"
  sudo systemctl disable elasticsearch
}
export -f disable-elasticsearch
<% end %>

# Samba
function enable-samba() {
  printf "\nEnabling Samba...\n"
  sudo systemctl enable smbd
}
export -f enable-samba

function start-samba() {
  printf "\nRestarting Samba...\n"
  sudo systemctl restart smbd
}
export -f start-samba

function stop-samba() {
  printf "\nStopping Samba...\n"
  sudo systemctl stop smbd
}
export -f stop-samba

function status-samba() {
  sudo systemctl status smbd
}
export -f status-samba

function disable-samba() {
  printf "\nDisabling Samba...\n"
  sudo systemctl disable smbd
}
export -f disable-samba

# Mailhog
function enable-mailhog() {
  printf "\nEnabling Mailhog...\n"
  sudo systemctl enable mailhog
}
export -f enable-mailhog

function start-mailhog() {
  printf "\nRestarting Mailhog...\n"
  sudo systemctl restart mailhog
}
export -f start-mailhog

function stop-mailhog() {
  printf "\nStopping Mailhog...\n"
  sudo systemctl stop mailhog
}
export -f stop-mailhog

function status-mailhog() {
  sudo systemctl status mailhog
}
export -f status-mailhog

function disable-mailhog() {
  printf "\nDisabling Mailhog...\n"
  sudo systemctl disable mailhog
}
export -f disable-mailhog

# Tools
function warm-cache() {
  clear
  URLS=(<%= @urls %>);
  for URL in ${URLS[@]}; do
    printf "Warming the cache for ${URL}...\n";
    sleep 1;
    curl -s ${URL} -H 'Cache-Control: no-cache' >&1 | egrep -o "${URL}[^<]+" | cut -d'"' -f 1 | while read line;
    do 
      time curl -A 'Cache Warmer' -s -L $line > /dev/null 2>&1;
      echo $line; 
    done; 
    printf "done.\n\n"; 
    sleep 1;
  done
}

function motd() {
  clear
  cat /var/run/motd.dynamic
}
export -f motd

function clear-cron-schedule() {
  DB_USER="<%= @db_user %>"
  DB_PASSWORD="<%= @db_password %>"
  DB_NAME="<%= @db_name %>"
  printf "\nClearing the cron schedule database table..."
  mysql --user=${DB_USER} --password=${DB_PASSWORD} --database=${DB_NAME} -e "DELETE FROM cron_schedule;"
  sleep 1
  printf "done.\n"
}
export -f clear-cron-schedule

# Error Reporting / Logs
function list-reports() {
  www
  if [ -d "./var/report" ]; then
    ll ./var/report
  else
    printf "\nThere are no error reports to view.\n\n"
  fi
}
export -f list-reports

function list-logs() {
  www
  ll var/log
}
export -f list-logs

function report() {
  www
  cat var/report/$1
}
export -f report

function log() {
  www
  cat var/log/$1
}
export -f log

# Data Packs
function install-data-pack() {
  www
  ./bin/magento gxd:datainstall --load=$1 $2 -r
}
export -f install-data-pack

# Backup / Rollback
function sanitize-config-json {
  CONFIG_JSON_FILE="<%= @config_json_dir %>/config.json"
  
  declare -A SETTINGS
  SETTINGS["Composer Private Key"]=$(sudo jq .application.authentication.composer.private_key $CONFIG_JSON_FILE)
  SETTINGS["Composer Public Key"]=$(sudo jq  .application.authentication.composer.public_key $CONFIG_JSON_FILE)
  SETTINGS["Github Token"]=$(sudo jq .application.authentication.composer.github_token $CONFIG_JSON_FILE)
  SETTINGS["Production API Key"]=$(sudo jq .application.authentication.commerce_services.production_api_key $CONFIG_JSON_FILE)
  SETTINGS["Project ID"]=$(sudo jq .application.authentication.commerce_services.project_id $CONFIG_JSON_FILE)
  SETTINGS["Data Space ID"]=$(sudo jq .application.authentication.commerce_services.data_space_id $CONFIG_JSON_FILE)
  SETTINGS["Build Action"]=$(sudo jq .application.build.action $CONFIG_JSON_FILE)
  SETTINGS["Backup Hook"]=$(sudo jq .application.build.hooks.backup $CONFIG_JSON_FILE)

  declare -A COMMANDS
  COMMANDS["Build Action"]=\"restore\"
  COMMANDS["Backup Hook"]=false

  for key in "${!SETTINGS[@]}"; do
    ([ ${SETTINGS[$key]} == 'null' ] || [ "${SETTINGS[$key]}" == '""' ]) && continue
    
    case $key in
      "Build Action" | "Backup Hook")
        printf "\nResetting $key..."
        sudo sed -i "s/${SETTINGS[$key]}/${COMMANDS[$key]}/g" ${CONFIG_JSON_FILE}
        printf "done."
        ;;
      *)
        printf "\nSanitizing $key..."
        sudo sed -i "s/${SETTINGS[$key]}/\"\"/g" ${CONFIG_JSON_FILE}
        printf "done."
        ;;
    esac
  done | sort
}
export -f sanitize-config-json

function backup-app() {
  printf "\nEnabling backup functionality... \n"
  www
  ./bin/magento config:set system/backup/functionality_enabled 1
  printf "\n"; ./bin/magento setup:backup --code --media --db
}
export -f backup-app

function prepare-backup() {
  DIRS=("<%= @backup_holding_area %>/app" "<%= @backup_holding_area %>/build")

  printf "\nPreparing backup..."
  for DIR in ${DIRS[@]}; do
    if [ ! -d $DIR ]; then
      sudo mkdir -p $DIR 2>/dev/null
      sudo chown <%= @user %>:<%= @user %> $DIR
    fi
  done
  printf "done."
}
export -f prepare-backup

function collect-build() {
  BACKUP_HOLDING_AREA="<%= @backup_holding_area %>"
  BUILD_DIR="<%= @build_dir %>"
  BUILD_HOLDING_AREA="${BACKUP_HOLDING_AREA}/build"
  CONFIG_JSON_FILE="<%= @config_json_dir %>/config.json"

  ([ ! -d ${BUILD_HOLDING_AREA} ] || [ ! -d ${BUILD_DIR} ] || [ ! -f ${CONFIG_JSON_FILE} ]) && return
  
  
  <% unless @local_data_pack_list.empty? %>
  if [ ! -z "$(ls -A ${BUILD_DIR})" ] && [ ! "$(ls -A ${BUILD_DIR})" == ".gitignore" ]
  then
    printf "\nCollecting data packs..."
    sudo cp -R ${BUILD_DIR}/* ${BUILD_HOLDING_AREA}
    printf "done."
  fi

  <% end %>
  printf "\nCollecting config.json..."
  sudo cp ${CONFIG_JSON_FILE} ${BUILD_HOLDING_AREA}
  printf "done."

  sudo chown -R <%= @user %>:<%= @user %> ${BACKUP_HOLDING_AREA}/*
}
export -f collect-build

function zip-build() {
  BACKUP_HOLDING_AREA="<%= @backup_holding_area %>"
  BUILD_HOLDING_AREA="${BACKUP_HOLDING_AREA}/build"
  BACKUP_DIR="<%= @web_root%>/<%= @backup_dir %>"

  [ ! -d ${BUILD_HOLDING_AREA} ] && return
  
  printf "\nZipping build..."
  cd ${BUILD_HOLDING_AREA}
  
  zip -rq ${BACKUP_DIR}/build.zip *
  printf "done."
}
export -f zip-build

function collect-app() {
  BACKUP_HOLDING_AREA="<%= @backup_holding_area %>"
  APP_HOLDING_AREA="${BACKUP_HOLDING_AREA}/app"
  BACKUP_DIR="<%= @web_root%>/<%= @backup_dir %>"

  ([ ! -d ${BACKUP_DIR} ] || [ -z "$(ls -A ${BACKUP_DIR})" ]) && return
  
  printf "\nCollecting backups..."
  cp ${BACKUP_DIR}/* ${APP_HOLDING_AREA}
  printf "done."
  
  rm -rf ${BACKUP_DIR}/*
}
export -f collect-app

function zip-app() {
  APP_HOLDING_AREA="<%= @backup_holding_area %>/app"
  BACKUP_DIR="<%= @web_root%>/<%= @backup_dir %>"

  printf "\nZipping application..."
  cd ${APP_HOLDING_AREA}
  zip -rq ${BACKUP_DIR}/app.zip *
  printf "done."
}
export -f zip-app

function zip-project() {
  BACKUP_DIR="<%= @web_root%>/<%= @backup_dir %>"
  
  printf "\nZipping project..."
  cd ${BACKUP_DIR}
  zip -rq ${BACKUP_DIR}/<%= @base_url %>.zip build.zip app.zip
  printf "done."
}
export -f zip-project

function clean-up-backup() {
  BACKUP_HOLDING_AREA=<%= @backup_holding_area %>
  BACKUP_DIR="<%= @web_root%>/<%= @backup_dir %>"
  sudo rm -rf ${BACKUP_HOLDING_AREA}/*
  sudo rm -rf ${BACKUP_DIR}/app.zip build.zip
}
export -f clean-up-backup

function export-backup() {
  USER=<%= @user %>
  EXPORT_DIR="/${USER}/backup"
  BACKUP_DIR="<%= @web_root%>/<%= @backup_dir %>"

  [ ! -d ${BACKUP_DIR} ] && return
  [ ! -d "${EXPORT_DIR}" ] && mkdir -p ${EXPORT_DIR}
  
  printf "\nExporting all backups to the VM app/vm/backup directory..."
  cp -R ${BACKUP_DIR}/* ${EXPORT_DIR}
  printf "done."
}
export -f export-backup

function remove-backup() {
  BACKUP_DIR="<%= @web_root%>/<%= @backup_dir %>"
  
  [ ! -d ${BACKUP_DIR} ] && return
  
  www
  printf "\nRemoving all backups on the VM (Local backups will not be affected)..."
  sleep 1
  sudo rm -rf ${BACKUP_DIR}/*
  printf "done."
  
}
export -f remove-backup

function backup-project() {
  prepare-backup
  sanitize-config-json
  
  printf "\n"
  collect-build
  
  printf "\n"
  backup-app
  collect-app
  
  printf "\n"
  zip-build
  zip-app
  zip-project

  printf "\n"
  clean-up-backup
  export-backup
  remove-backup

  printf "\n"
}
export -f backup-project