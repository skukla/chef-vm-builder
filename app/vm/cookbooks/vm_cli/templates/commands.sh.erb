# VM Navigation
function www() {
  MAGENTO_DIRECTORY="<%= @web_root %>"
  cd ${MAGENTO_DIRECTORY}
}
export -f www

function list-cli() {
  www
  ./bin/magento list
}
export -f list-cli

function reports() {
  www
  if [ ! -z "$(ls -A ./var/report > /dev/null 2>&1;)" ]; then
    cd var/report
  else
    printf "\nThere is no report directory.\n\n"
  fi
}
export -f reports

function logs() {
  www
  cd var/log
}
export -f logs

# CLI
function own() {
  USER="<%= @user %>"
  GROUP="<%= @user %>"
  printf "\nUpdating permissions..."
  clear
  www
  sudo chown -R ${USER}:${GROUP} var/ pub/ generated/ app/etc
  sudo chmod -R 777 var/ pub/ app/etc/ generated/
  sleep 1
  printf "done.\n"
}
export -f own

function clear-web-root() {
  printf "\nClearing the web root..."
  www
  sudo rm -rf ./generated/
  sudo rm -rf {..?,.[!.],}*
  printf "done. \n"
}
export -f clear-web-root

function cache() {
  clear
  www
  printf "Clearing cache...\n"
  ./bin/magento cache:clean
  rm -rf var/cache/* var/page_cache/*
}
export -f cache

function flush-cache() {
  www
  printf "\nFlushing cache...\n"
  ./bin/magento cache:flush
  rm -rf var/cache/* var/page_cache/*
}
export -f flush-cache

function enable-cache() {
  printf "\nEnabling cache...\n"
  www
  ./bin/magento cache:enable
}
export -f enable-cache

function disable-cache() {
  printf "\nDisabling cache...\n"
  www
  ./bin/magento cache:disable
}
export -f disable-cache

function disable-cms-cache() {
  printf "\nDisabling Layout, Block, and Full Page cache...\n"
  www
  ./bin/magento cache:disable layout block_html full_page
}
export -f disable-cms-cache

function reindex() {
  clear
  www
  printf "Invalidating indexes...\n"
  ./bin/magento indexer:reset
  printf "\nReindexing...\n"
  ./bin/magento indexer:reindex
}
export -f reindex

function clean() {
  reindex
  cache
}
export -f clean

function enable-cron() {
  printf "\nEnabling cron...\n"
  www
  ./bin/magento cron:install
  printf "done.\n"
}
export -f enable-cron

function cron() {
  printf "\nRunning cron jobs...\n"
  www
  ./bin/magento cron:run
}
export -f cron

function disable-cron() {
  printf "\nDisabling cron...\n"
  www
  ./bin/magento cron:remove
  crontab -r
  clear-cron-schedule 
}
export -f disable-cron

function list-modules() {
  www
  ./bin/magento module:status
}
export -f list-modules

function enable-all-modules() {
  printf "\nEnabling all modules...\n"
  www
  ./bin/magento module:enable --all
}
export -f enable-all-modules

function process-catalogs() {
  printf "\nProcessing shared catalog(s)...\n"
  www
  reindex
  cache
  cron
}
export -f process-catalogs

function db-upgrade() {
  printf "\nUpgrading database schema...\n"
  www
  ./bin/magento setup:upgrade
}
export -f db-upgrade

function di-compile() {
  printf "\nCompiling dependency injections...\n"
  www && ./bin/magento setup:di:compile
}
export -f di-compile

function deploy-content() {
  printf "\nDeploying static content...\n"
  www
  rm -rf ./pub/static/*
  ./bin/magento setup:static-content:deploy -f
}
export -f deploy-content

function dev-mode() {
  printf "\nSwitching to Developer mode...\n"
  www
  ./bin/magento deploy:mode:set developer
  cache
}
export -f dev-mode

function prod-mode() {
  printf "\nSwitching to Production mode...\n"
  www
  ./bin/magento deploy:mode:set production
}
export -f prod-mode

function start-all-consumers() {
  CONSUMERS_LIST=(
    <% @consumer_list.each do |consumer| %>
      <%= consumer %>
    <% end %>
  )
  printf "\nStarting all consumers...\n"
  for consumer in "${CONSUMERS_LIST[@]}"
    do bin/magento queue:consumers:start $consumer &
  done
} 
export -f start-all-consumers

function add-modules() {
  www
  apply-patches
  own
  db-upgrade
  di-compile
  deploy-content
  deploy-content-de
  enable-cache
  clean
}
export -f add-modules

function upgrade() {
  clear
  printf "Beginning the upgrade process...\n"
  www
  own
  configure-proxy
  disable-cron
  update-composer
  add-modules
  enable-cron
  printf "\nUpgrade finished!\n"
}
export -f upgrade

# PHP-FPM
function start-php() {
  printf "\nRestarting PHP-FPM <%= @php_version %>...\n"
  sudo systemctl restart php<%= @php_version%>-fpm
}
export -f start-php

function stop-php() {
  printf "\nStopping PHP-FPM <%= @php_version %>...\n"
  sudo systemctl stop php<%= @php_version %>-fpm
}
export -f stop-php

function status-php() {
  sudo systemctl status php<%= @php_version %>-fpm
}
export -f status-php

# Web
function start-web() {
  printf "\nRestarting the web server...\n"
  sudo systemctl restart nginx
}
export -f start-web

function stop-web() {
  printf "\nStopping the web server...\n"
  sudo systemctl stop nginx
}
export -f stop-web

function status-web() {
  sudo systemctl status nginx
}
export -f status-web

# Database
function db() {
  DB_HOST="<%= @db_host %>"
  DB_USER="<%= @db_user %>"
  DB_PASSWORD="<%= @db_password %>"
  DB_NAME="<%= @db_name %>"
  mysql ${DB_NAME} -sN -h ${DB_HOST} -u ${DB_USER} -p${DB_PASSWORD}
}
export -f db

function start-db() {
  printf "\nRestarting the database...\n"
  sudo systemctl restart mysql
}
export -f start-db

function stop-db() {
  printf "\nStopping the database...\n"
  sudo systemctl stop mysql
}
export -f stop-db

function status-db() {
  sudo systemctl status mysql
}
export -f status-db

# Samba
function enable-samba() {
  printf "\nEnabling Samba...\n"
  sudo systemctl enable smbd
}
export -f enable-samba

function start-samba() {
  printf "\nRestarting Samba...\n"
  sudo systemctl restart smbd
}
export -f start-samba

function stop-samba() {
  printf "\nStopping Samba...\n"
  sudo systemctl stop smbd
}
export -f stop-samba

function status-samba() {
  sudo systemctl status smbd
}
export -f status-samba

function disable-samba() {
  printf "\nDisabling Samba...\n"
  sudo systemctl disable smbd
}
export -f disable-samba

# Mailhog
function enable-mailhog() {
  printf "\nEnabling Mailhog...\n"
  sudo systemctl enable mailhog
}
export -f enable-mailhog

function start-mailhog() {
  printf "\nRestarting Mailhog...\n"
  sudo systemctl restart mailhog
}
export -f start-mailhog

function stop-mailhog() {
  printf "\nStopping Mailhog...\n"
  sudo systemctl stop mailhog
}
export -f stop-mailhog

function status-mailhog() {
  sudo systemctl status mailhog
}
export -f status-mailhog

function disable-mailhog() {
  printf "\nDisabling Mailhog...\n"
  sudo systemctl disable mailhog
}
export -f disable-mailhog

# Tools
function warm-cache() {
  clear
  URLS=(<%= @urls %>);
  for URL in ${URLS[@]}; do
    printf "Warming the cache for ${URL}...\n";
    sleep 1;
    curl -s ${URL} -H 'Cache-Control: no-cache' >&1 | egrep -o "${URL}[^<]+" | cut -d'"' -f 1 | while read line;
    do 
      time curl -A 'Cache Warmer' -s -L $line > /dev/null 2>&1;
      echo $line; 
    done; 
    printf "done.\n\n"; 
    sleep 1;
  done
}

function motd() {
  clear
  cat /var/run/motd.dynamic
}
export -f motd

function clear-cron-schedule() {
  DB_USER="<%= @db_user %>"
  DB_PASSWORD="<%= @db_password %>"
  DB_NAME="<%= @db_name %>"
  printf "\nClearing the cron schedule database table..."
  mysql --user=${DB_USER} --password=${DB_PASSWORD} --database=${DB_NAME} -e "DELETE FROM cron_schedule;"
  sleep 1
  printf "done.\n"
}
export -f clear-cron-schedule

# Error Reporting / Logs
function list-reports() {
  www
  if [ -d "./var/report" ]; then
    ll ./var/report
  else
    printf "\nThere are no error reports to view.\n\n"
  fi
}
export -f list-reports

function list-logs() {
  www
  ll var/log
}
export -f list-logs

function report() {
  www
  cat var/report/$1
}
export -f report

function log() {
  www
  cat var/log/$1
}
export -f log

# Backup / Rollback
function enable-backups() {
  printf "\nEnabling backup functionality... \n"
  www
  ./bin/magento config:set system/backup/functionality_enabled 1
}
export -f enable-backups

function list-backups() {
  www
  printf "\nBackup List: \n"
  ./bin/magento info:backups:list
}
export -f list-backups

function backup-code() {
  enable-backups
  printf "\nBacking up the codebase...\n"
  ./bin/magento setup:backup --code
  printf "done. \n"
}
export -f backup-code

function backup-media() {
  enable-backups
  printf "\nBacking up media...\n"
  www
  ./bin/magento setup:backup --media
  printf "done. \n"
}
export -f backup-media

function backup-db() {
  enable-backups
  printf "\nBacking up the database...\n"
  www
  ./bin/magento setup:backup --db
  printf "done. \n"
}
export -f backup-db

function backup() {
  enable-backups
  list-backups
  printf "\n"; ./bin/magento setup:backup --code --media --db; printf "done. \n"
  list-backups
}
export -f backup

function export-backup() {
  USER=<%= @user %>
  EXPORT_DIR="/${USER}/backup"
  BACKUP_DIR="/var/www/magento/var/backups"

  list-backups
  if [ -d "${BACKUP_DIR}" ]; then
    printf "\nExporting all backups to the VM app/vm/backup directory..."
    if [ ! -d "${EXPORT_DIR}" ]; then
      mkdir -p ${EXPORT_DIR}
    fi
    cp -R ${BACKUP_DIR}/* ${EXPORT_DIR}
    printf "done. \n"
  fi
}
export -f export-backup

function remove-backup() {
  BACKUP_DIR="/var/www/magento/var/backups"
  
  www
  if [ -d "${BACKUP_DIR}" ]; then
    printf "\nRemoving all backups on the VM (Local backups will not be affected)..."
    sleep 1
    rm -rf ${BACKUP_DIR}/*
    printf "done. \n"
  fi
  list-backups
}
export -f remove-backup

function import-backup() {
  USER="vagrant"
  IMPORT_DIR="/${USER}/backups"
  BACKUP_DIR="/var/www/magento/var/backups"
  IMPORTED=false

  www
  if [ ! -d "${IMPORT_DIR}" ]; then
    printf "\nLooks like there isn't a folder called 'backups' inside of your app directory.  Please create it and try again.\n"
    return
  fi
  if [ ! -d "${BACKUP_DIR}" ]; then
    printf "\nImport failed because there isn't a backups directory in the web root at var/backups.\n"
    return
  fi
  for FILENAME in ${IMPORT_DIR}/*; do
    if [ "${FILENAME}" = "${IMPORT_DIR}/*" ]; then
      printf "\nThere are no backup files to import in your app/backups directory. Exiting...\n"
      sleep 3
      return
    else
      if [ ! -e ${BACKUP_DIR}/$(basename "${FILENAME}") ]; then
        printf "Importing ${FILENAME}..."
        cp "${FILENAME}" ${BACKUP_DIR}/$(basename "${FILENAME}")
        printf "done.\n"

        if [ ${FILENAME##*.} == "zip" ]; then
          printf "\nUzipping ${FILENAME} in ${BACKUP_DIR}...\n\n"
          unzip -d ${BACKUP_DIR} ${FILENAME}
          rm -rf ${BACKUP_DIR}/__MACOSX 
          rm -rf ${BACKUP_DIR}/*.zip
        fi
      else
        IMPORTED=true
      fi
    fi
  done
  if [ $IMPORTED = true ]; then
    printf "\nAll files are ready to import on the VM.\n\n"
  fi
  chown ${USER}:${USER} -R ./var/*
  chmod -R 777 ./var/*
}
export -f import-backup

function restore() {
  START=`date +%s`
  USER="<%= @user %>"
  GROUP="<%= @user %>"
  DB_USER="<%= @db_user %>"
  DB_PASSWORD="<%= @db_password %>"
  DB_NAME="<%= @db_name %>"
  BACKUP_HOLDING_AREA="/var/www/backups"
  VAR_DIR="/var/www/magento/var"
  BACKUP_DIR="/var/www/magento/var/backups"

  www
  if [ -z "$(ls -A ./var/backups)" ]; then
    printf "\nThere are no backup files in the VM. Trying to import them now...\n\n"
    sleep 3
    import-backups
  fi 
  if [[ $# -eq 0 ]] ; then
    list-backups
    printf "\nCodebase File: "
    read CODEBASE_FILENAME
    printf "Database File: "
    read DATABASE_FILENAME
    printf "Media File: "
    read MEDIA_FILENAME
  else
    CODEBASE_FILENAME=$1
    DATABASE_FILENAME=$2
    MEDIA_FILENAME=$3
  fi
  if [ -d "${BACKUP_HOLDING_AREA}" ] && [ -d "${BACKUP_DIR}" ]; then 
    printf "\nCopying backups to ${BACKUP_HOLDING_AREA}..."
    sudo cp ${BACKUP_DIR}/* ${BACKUP_HOLDING_AREA}
    sudo cp ./var/.first-run-state.flag ${BACKUP_HOLDING_AREA}
    sleep 1
    printf "done. \n"; 
  fi
  if [ ! -f ${BACKUP_HOLDING_AREA}/${CODEBASE_FILENAME} ]; then 
    printf "\nOh snap, the codebase file you specified doesn't exist. Please try again. Exiting..."
    sleep 5
    clear
    return
  fi
  if [ ! -f ${BACKUP_HOLDING_AREA}/${DATABASE_FILENAME} ]; then 
    printf "\nOh snap, the database file you specified doesn't exist. Please try again. Exiting..."
    sleep 5
    clear
    return
  fi
  if [ ! -f ${BACKUP_HOLDING_AREA}/${MEDIA_FILENAME} ]; then 
    printf "\nOh snap, the media file you specified doesn't exist. Please try again. Exiting..."
    sleep 5
    clear
    return
  fi

  disable-cron
  clear-web-root

  printf "\nRestoring the codebase..."
  tar -xf ${BACKUP_HOLDING_AREA}/${CODEBASE_FILENAME}
  printf "\n"
  composer install
  printf "done. \n"

  printf "\nRestoring media..."
  tar -xf ${BACKUP_HOLDING_AREA}/${MEDIA_FILENAME}
  printf "done. \n"

  printf "\nRestoring the database (this might take a bit)..."
  mysql -u ${DB_USER} -p${DB_PASSWORD} ${DB_NAME} < ${BACKUP_HOLDING_AREA}/${DATABASE_FILENAME}
  printf "done.\n"
  
  db-upgrade
  
  printf "\nReplacing backups..." 
  if [ ! -d "${BACKUP_DIR}" ]; then 
    mkdir -p "${BACKUP_DIR}"
  fi
  sudo cp ${BACKUP_HOLDING_AREA}/* ${BACKUP_DIR}
  if [ -d "${BACKUP_HOLDING_AREA}" ] && [ -d "${VAR_DIR}" ] && [ -f "${BACKUP_HOLDING_AREA}/.first-run-state.flag" ]; then 
    sudo cp ${BACKUP_HOLDING_AREA}/.first-run-state.flag ./var/
    rm -rf ${BACKUP_HOLDING_AREA}/*
    printf "done. \n"
  else
    printf "\nOh snap, one of the folders we need doesn't exist. Exiting..."
    sleep 5
    clear
    return
  fi

  printf "\nUpdating permissions..."
  sudo chown -R ${USER}:${GROUP} ./*
  sudo chmod -R 777 var/ pub/ app/etc/ generated/
  printf "done.\n"

  printf "\nCleaning up generated and cache folders..."
  sudo rm -rf ./generated/ var/cache/*
  printf "done. \n"

  prod-mode
  ./bin/magento indexer:reindex
  ./bin/magento cache:clean
  enable-cron

  END=`date +%s`
  RUNTIME=$((${END}-${START}))
  MINUTES=$(( (${RUNTIME} % 3600) / 60 )); SECONDS=$(( (${RUNTIME} % 3600) % 60 ))
  printf "\nBackup restored in ${MINUTES} minutes, ${SECONDS} seconds.\n"
}
export -f restore

function install-data-pack() {
  www
  ./bin/magento gxd:datainstall --load=$1 $2 -r
}
export -f install-data-pack