#
# Vagrantfile
#
# Copyright 2020, Steve Kukla, All Rights Reserved.
require "json"

# Clear the screen
system ("clear")

top_dir = "#{File.expand_path("..", Dir.pwd)}"
data_pack_dir = "#{top_dir}/demo"
app_dir = File.dirname(File.expand_path(__FILE__))
demo_builder_files_path = "#{app_dir}/cookbooks/magento_demo_builder/files/default/demo"
environment_file = "#{app_dir}/environments/vm.rb"
config_file = "#{top_dir}/config.json"

# Read the configuration json file
config_file_content = File.read(config_file)
settings = JSON.parse(config_file_content)

# Start VM Setup
Vagrant.configure("2") do |config|
  
  # Plugin check (VMWare Fusion and Virtualbox will want different Vagrant plugins)
  config.trigger.before :up do |trigger|
    trigger.name = "Checking for required plugins..."
    trigger.ruby do
      plugins = settings["vagrant"]["plugins"]["all"]
      if settings["vm"]["hypervisor"] == "virtualbox"
        plugins.push(*settings["vagrant"]["plugins"]["virtualbox"])
      else
        plugins.push(*settings["vagrant"]["plugins"]["vmware"])
      end
      plugins.each do |plugin|
        unless Vagrant.has_plugin?("#{plugin}")
          system("vagrant plugin install #{plugin}", :chdir=>"/tmp") || exit!
        end
      end
      sleep(1)
    end
  end

  # Copy selected demo packs
  config.trigger.before [:up, :reload, :provision] do |trigger|
    trigger.name = "Copying local data packs..."
    trigger.ruby do
      Dir["#{demo_builder_files_path}/*"].each { |entry| FileUtils.rm_r(entry) }
      settings["custom_demo"]["custom_modules"].each do |custom_module_key, custom_module_value|
        Dir["#{data_pack_dir}/*"].each do |entry|
          entry_path = [File.dirname(entry), File.basename(entry)].join("/").split("/").pop(1).join("/")
          if entry_path == custom_module_value["repository_url"]
            Dir["#{data_pack_dir}/*"].each do |entry|
              if Dir.exist?(entry)
                FileUtils.cp_r(entry, "#{demo_builder_files_path}/")
              end
            end
          end
        end
      end
    end
  end

  # Write out chef environment file from configuration
  config.trigger.before [:up, :reload, :provision] do |trigger|
    trigger.name = "Creating environment file..."
    trigger.ruby do
      environment_file_content = [
          'name "vm"',
          'description "Configuration file for the Kukla Demo VM"',
          "default_attributes(#{settings})"
      ]  
      File.open(environment_file, "w+") do |file|
          file.puts(environment_file_content)
      end
      sleep(1)
    end
  end
  
  # SSH/Password access and VM Box
  config.ssh.insert_key = false
  config.ssh.forward_agent = true
  
  config.vm.box = settings["remote_machine"]["box"]

  # Set the hostname and configure networking
  config.vm.define settings["remote_machine"]["name"] do |machine|
    machine.vm.network "private_network", ip: settings["vm"]["ip"]
    
    # Get urls for custom demo and create hostname and aliases
    demo_urls = Array.new
    settings["custom_demo"]["structure"].each do |scope, scope_hash|
      scope_hash.each do |code, url|
        if code == "base"
          machine.vm.hostname = settings["custom_demo"]["structure"]["website"]["base"]
        else
          demo_urls << url
        end
      end
    end
    config.multihostsupdater.aliases = demo_urls
  end

  # Configure VM machine based on hypervisor
  config.vm.provider "#{settings["vm"]["hypervisor"]}" do |machine|
    machine.gui = settings["hypervisor"]["all"]["gui"]
    machine.linked_clone = settings["hypervisor"]["all"]["linked_clones"]
    
    if settings["vm"]["hypervisor"] == "virtualbox"  
      machine.default_nic_type = settings["hypervisor"]["virtualbox"]["default_nic_type"]
      machine.customize [
        "modifyvm", :id,
          "--name", settings["vm"]["name"],
          "--memory", settings["remote_machine"]["memory"],
          "--cpus", settings["remote_machine"]["cpus"],
          "--vram", settings["remote_machine"]["vram"],
          "--vrde", settings["hypervisor"]["virtualbox"]["remote_display"]
          
      ]
    # VMWare-specific settings
    elsif settings["vm"]["hypervisor"].include?("vmware")
      machine.vmx["memsize"] = settings["remote_machine"]["memory"]
      machine.vmx["numvcpus"] = settings["remote_machine"]["cpus"]
      machine.vmx["ethernet0.pcislotnumber"] = settings["hypervisor"]["vmware"]["eth0_pcislotnumber"]
      machine.vmx["ethernet1.pcislotnumber"] = settings["hypervisor"]["vmware"]["eth1_pcislotnumber"]
    end
  end

  # Run Chef check provisioner
  config.vm.provision "#{settings["provisioner"]["type"]}" do |chef|
    chef.version = "#{settings["provisioner"]["version"].chomp}"
    chef.nodes_path = "#{settings["provisioner"]["nodes_path"]}"
    chef.environments_path = "#{settings["provisioner"]["environments_path"]}"
    chef.roles_path = "#{settings["provisioner"]["roles_path"]}"
    chef.cookbooks_path = "#{settings["provisioner"]["cookbooks_path"]}"

    # Environment
    chef.environment = "vm"

    # Roles
    chef.add_role "base"
    chef.add_role "infrastructure"
    chef.add_role "application"

    # Accept Chef License
    chef.arguments = "--chef-license accept"
  end

  # Manage SSL certificates trigger
  if settings["application"].has_key?("settings")
    if settings["application"]["settings"].has_key?("use_secure_frontend") || settings["application"]["settings"].has_key?("use_secure_backend")
      unless settings["application"]["settings"]["use_secure_frontend"].nil? || settings["application"]["settings"]["use_secure_admin"].nil?
        if settings["application"]["settings"]["use_secure_frontend"].to_s == "1" || settings["application"]["settings"]["use_secure_admin"].to_s == "1"
          config.trigger.after [:up, :reload, :provision] do |trigger|
            trigger.name = "Setting up ssl certificate..."
            trigger.ruby do
              if File.exist?("#{app_dir}/certificate/#{settings["custom_demo"]["structure"]["website"]["base"]}.crt")
                system("sudo security find-certificate -c #{settings["custom_demo"]["structure"]["website"]["base"].to_s.chomp} > /dev/null 2>&1")
                if $?.exitstatus == 0
                  system("sudo security delete-certificate -c #{settings["custom_demo"]["structure"]["website"]["base"].to_s.chomp} /Library/Keychains/System.keychain")
                end
                system("sudo security add-trusted-cert -d -r trustAsRoot -k /Library/Keychains/System.keychain #{app_dir}/certificate/#{settings["custom_demo"]["structure"]["website"]["base"]}.crt")
              end
            end
          end
        end
      end
    end
  end
end
